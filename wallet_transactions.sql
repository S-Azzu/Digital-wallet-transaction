CREATE DATABASE WALLET_TRANSACTIONS;
USE WALLET_TRANSACTIONS;

CREATE TABLE TRANSACTION_DETAILS(
IDX INT PRIMARY KEY,
TRANSACTION_ID VARCHAR(50),
USER_ID VARCHAR(50),
TRANSACTION_DATE DATE NOT NULL,
TRANSACTION_TIME TIME NOT NULL,
TRANSACTION_FEE DOUBLE,
TRANSACTION_STATUS VARCHAR(50),
LOYALTY_POINTS DOUBLE,
PAYMENT_MODE VARCHAR(50));


SELECT * FROM CUSTOMER_DETAILS;

SELECT * FROM TRANSACTION_DETAILS;

-- 1.COUNT OF TRANSACTIONS

SELECT COUNT(TRANSACTION_ID) FROM TRANSACTION_DETAILS;

-- 2.CASHBACK RECEIVED BY EACH MERCHANT

SELECT MERCHANT_NAME,PRODUCT_AMOUNT,CASHBACK
FROM CUSTOMER_DETAILS
ORDER BY CASHBACK DESC
LIMIT 10;


-- 3.TOP 5 MOST CASHBACK PER CUSTOMER

SELECT USER_ID,SUM(CASHBACK) AS TOTAL_CASHBACK
FROM CUSTOMER_DETAILS
GROUP BY USER_ID
ORDER BY TOTAL_CASHBACK DESC
LIMIT 5;


-- 4.DISTANT COUNT OF DEVICE TYPE IN WALLET_TRANSACTION

SELECT DEVICE_TYPE,COUNT(DEVICE_TYPE) 
FROM CUSTOMER_DETAILS
GROUP BY DEVICE_TYPE;

-- 5.DISTRIBUTION OF TRANSACTION_COUNT,AMOUNT ACROSS  DIFFERENT PRODUCT CATEGORIES

SELECT PRODUCT_CATEGORY, 
COUNT(USER_ID)AS TRANSACTION_COUNT, 
ROUND(SUM(PRODUCT_AMOUNT),2) AS TOTAL_AMOUNT, 
ROUND(AVG(PRODUCT_AMOUNT),2) AS AVERAGE_AMOUNT, 
ROUND(MIN(PRODUCT_AMOUNT),2) AS MIN_AMOUNT, 
MAX(PRODUCT_AMOUNT) AS MAX_AMOUNT
FROM CUSTOMER_DETAILS
GROUP BY PRODUCT_CATEGORY
ORDER BY TOTAL_AMOUNT DESC;


-- 6.DISTRIBUTION OF TRANSACTION STATUSES (SUCCESSFUL, FAILED, PENDING) ACROSS DIFFERENT PAYMENT METHODS?

SELECT TRANSACTION_STATUS,PAYMENT_MODE,COUNT(*) AS TRANSACTION_ID
FROM TRANSACTION_DETAILS
GROUP BY TRANSACTION_STATUS,PAYMENT_MODE
ORDER BY TRANSACTION_STATUS,PAYMENT_MODE;

-- 7.ARE THERE ANY NOTICEABLE TRENDS IN TRANSACTION AMOUNTS OVER TIME?

SELECT TRANSACTION_DETAILS.TRANSACTION_DATE,
ROUND(SUM(CUSTOMER_DETAILS.PRODUCT_AMOUNT),2) AS TOTAL_PRODUCT_AMOUNT
FROM TRANSACTION_DETAILS JOIN CUSTOMER_DETAILS
ON TRANSACTION_DETAILS.USER_ID=CUSTOMER_DETAILS.USER_ID
GROUP BY TRANSACTION_DETAILS.TRANSACTION_DATE;

-- 8.NO.OF FAILED TRANSACTIONS ACCORDING TO PAYMENT_MODE

SELECT PAYMENT_MODE,COUNT(TRANSACTION_STATUS)AS FAILED_TRANSACTIONS
FROM TRANSACTION_DETAILS
WHERE TRANSACTION_STATUS='FAILED'
GROUP BY PAYMENT_MODE
ORDER BY FAILED_TRANSACTIONS DESC ;

-- 9.NO.OF SUCCESFUL TRANSACTIONS ACCORDING TO PAYMENT_MODE

SELECT PAYMENT_MODE,COUNT(TRANSACTION_STATUS)AS SUCCESSFUL_TRANSACTIONS
FROM TRANSACTION_DETAILS
WHERE TRANSACTION_STATUS='SUCCESSFUL'
GROUP BY PAYMENT_MODE
ORDER BY SUCCESSFUL_TRANSACTIONS DESC ;

-- 10.TRANSACTION DATE BASED UPON TRANSACTION_FEE AND CASH BACK EARNED BY PRODUCT_CATEGORY AND PRODUCT_AMOUNT

SELECT CU.PRODUCT_CATEGORY AS PRODUCT_CATEGORY,
SUM(CU.PRODUCT_AMOUNT) AS PRODUCT_AMOUNT,
SUM(CU.CASHBACK) AS CASHBACK,
TR.TRANSACTION_DATE AS DATE_TRANS,
SUM(TR.TRANSACTION_FEE) AS TRANS_FEE
FROM CUSTOMER_DETAILS CU
JOIN TRANSACTION_DETAILS TR
ON CU.USER_ID = TR.USER_ID
GROUP BY PRODUCT_CATEGORY,DATE_TRANS
ORDER BY PRODUCT_CATEGORY;

-- 11.MOST CASHBACK EARNED ON BASED ON PRODUCT CATEGORY AND LOYALITY POINTS

SELECT CU.PRODUCT_CATEGORY AS PRODUCT_CATEGORY,
ROUND(SUM(CU.CASHBACK),1) AS CASHBACK,SUM(TRAN.LOYALTY_POINTS) AS LOYALTY_POINTS
FROM CUSTOMER_DETAILS CU
JOIN TRANSACTION_DETAILS TRAN
ON CU.USER_ID =TRAN.USER_ID
GROUP BY PRODUCT_CATEGORY
ORDER BY CASHBACK DESC
LIMIT 5;

-- 12.NO.OF TRANSACTION ACCORDING TO DATE BASED ON LOCATION RURAL AND URBAN

SELECT TRANSACTION_DATE,LOCATION,
COUNT(TRANSACTION_ID) AS COUNT_TRANSACTION
FROM ( SELECT TR.TRANSACTION_DATE,TR.TRANSACTION_ID,CU.LOCATION
FROM TRANSACTION_DETAILS TR
JOIN CUSTOMER_DETAILS CU
ON TR.USER_ID = CU.USER_ID
WHERE CU.LOCATION IN ('RURAL', 'URBAN')
    ) AS FilteredData
GROUP BY TRANSACTION_DATE, LOCATION
ORDER BY TRANSACTION_DATE;


-- 13.TRANSACTION FEE BASED ON PRODUCT NAME ACCORDING TO MERCHANT

SELECT CU.MERCHANT_NAME AS MERCHANT_NAME,
CU.PRODUCT_NAME AS PRODUCT_NAME,ROUND(SUM(TRAN.TRANSACTION_FEE),2) AS TRANS_FEE
FROM CUSTOMER_DETAILS CU
JOIN TRANSACTION_DETAILS TRAN
ON CU.USER_ID=TRAN.USER_ID
GROUP BY MERCHANT_NAME,PRODUCT_NAME
ORDER BY TRANS_FEE DESC 
LIMIT 5;

-- 14.PEAK  TIME HOURS IN TRANSACTIONS

SELECT EXTRACT(HOUR FROM TRANSACTION_TIME) AS TRANSACTION_HOUR, 
COUNT(TRANSACTION_ID) AS TRANSACTION_COUNT
FROM TRANSACTION_DETAILS
GROUP BY TRANSACTION_HOUR
ORDER BY TRANSACTION_COUNT DESC;






